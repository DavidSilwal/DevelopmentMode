@using System.Collections.Generic
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Http.Authentication
@model LoginViewModel
@using Identity
@inject SignInManager<IdentityUser> SignInManager
@{
    ViewData["Title"] = "Log in";
}
<h2 class="sr-only">@ViewData["Title"]</h2>


<div class="page-auth text-center">
    <div class="login-box center-block">
        <h3 class="text-center">Log in</h3>

        <section class="text-center">


            @{
                var loginProviders = SignInManager.GetExternalAuthenticationSchemes().ToList();
                if (loginProviders.Count == 0)
                {
                    <div>
                        <p>
                            We do not support login from external providers yet.
                        </p>
                    </div>
                }
                else
                {
                    <form asp-controller="Account" asp-action="ExternalLogin" asp-route-returnurl="@ViewData["ReturnUrl"]" method="post" class="form-horizontal" role="form">
                        <div>
                            <p>
                                @foreach (var provider in loginProviders)
                                {
                                    <button type="submit" class="btn btn-custom-primary" name="provider" value="@provider.AuthenticationScheme" title="Log in using your @provider.DisplayName account">@provider.AuthenticationScheme</button>
                                }
                            </p>
                        </div>
                    </form>
                }
            }
        </section>





        @*<div class="separator"><span>OR</span></div>*@
        <div class="text-center separator">OR</div>


        <form asp-controller="Account" asp-action="Login" asp-route-returnurl="@ViewData["ReturnUrl"]" method="post" class="form-horizontal" role="form">

            <hr />
            <div asp-validation-summary="All" class="text-danger"></div>
            <div class="form-group">
                <label for="UserName" class="control-label sr-only">Username</label>
                <div class="col-md-12">

                    <div class="input-group">
                        <input asp-for="UserName" class="form-control" placeholder="Email Address*" />
                        <span class="input-group-addon"><i class="fa fa-user"></i></span>


                    </div>

                    @*<span asp-validation-for="UserName" class="text-danger"></span>*@

                </div>
            </div>

            <div class="form-group">
                <label for="password" class="control-label sr-only">Password</label>
                <div class="col-md-12">
                    <div class="input-group">
                        <input asp-for="Password" class="form-control" placeholder="Password*" type="password" />
                        <span class="input-group-addon"><i class="fa fa-lock"></i></span>
                        @*<span asp-validation-for="Password" class="text-danger "></span>*@
                    </div>

                </div>
            </div>

            <p>
                <a asp-action="ForgotPassword">Forgot your password?</a>
            </p>



            <div class="checkbox">
                <label asp-for="RememberMe">
                    <input asp-for="RememberMe" />
                    @Html.DisplayNameFor(m => m.RememberMe)
                </label>
            </div>
            <button type="submit" class="btn btn-custom-primary btn-block"> <i class="fa fa-arrow-circle-o-right"></i>Log in</button>


            <a asp-action="Register" asp-route-returnurl="@ViewData["ReturnUrl"]" class="btn btn-custom-primary btn-block">Register as a new user?</a>


        </form>




    </div>

</div>

@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
}